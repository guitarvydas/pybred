#!/usr/bin/env python3
## usage: ./bred.bash message.bred breddir <src

import subprocess
import sys
import os

# 0D
from sender import Sender
from receiver import Receiver
from up import Up
from down import Down
from across import Across
from container import Container

# components
from genboilerplate import GenerateBoilerPlate
from genpattern import GeneratePattern
from genliteral import GenerateLiterals
from genfab import GenerateFabSpec
from applytranspiler import ApplyTranspiler

class PyBred (Container):
  def __init__ (self, parent, name):
      gbp = GenerateBoilerPlate (self, f'{name}/genboilerplate')
      gp = GeneratePattern (self, f'{name}/genpattern')
      gl = GenerateLiterals (self, f'{name}/genliteral')
      gf = GenerateFabSpec (self, f'{name}/genfab')
      tr = ApplyTranspiler (self, f'{name}/applytranspiler')
      self._children = [gbp, gp, gl, gf, tr]
      self._connections = [
          # input src goes to all sub-components
          Down (Sender (self,'spec'), Receiver (gbp,'in')),
          Down (Sender (self,'spec'), Receiver (gp,'in')),
          Down (Sender (self,'spec'), Receiver (gl,'in')),
          Down (Sender (self,'spec'), Receiver (gf,'in')),
          Down (Sender (self,'in'), Receiver (tr,'in')),
          # batons for executing components in sequence
          Across (Sender (gbp, 'next'), Receiver (gp, 'go')),
          Across (Sender (gp, 'next'), Receiver (gl, 'go')),
          Across (Sender (gl, 'next'), Receiver (gf, 'go')),
          # output of each grammar-generating pass is accumulated by apply-er
          Across (Sender (gbp, 'out'), Receiver (tr, 'ohm')),
          Across (Sender (gp, 'out'), Receiver (tr, 'ohm')),
          Across (Sender (gl, 'out'), Receiver (tr, 'ohm')),
          # output of fab-generating pass feeds 'fab' pin of apply-er
          Across (Sender (gf, 'out'), Receiver (tr, 'fab')),
          # output of apply-er is the final output of the whole enchilada
          Up (Sender (tr, 'out'), Receiver (self, 'out'))
          ]
      super ().__init__ (parent, name, self._children, self._connections)

def fetchFromFile (filename):
  with open (filename, 'r') as f:
    r = f.read ()
    return r



spec = fetchFromFile (sys.argv [1])
src = sys.stdin.read ()

pybred = PyBred (None, 'pybred')
pybred.inject (port='spec', data=spec)
pybred.inject (port='in', data=src)
pybred.run ()
r = (pybred.outputs () ['out']) [0]
print (r)
l = r.splitlines ()
print (l)
print (len (l))

