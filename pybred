#!/usr/bin/env python3
## usage: ./bred.bash message.bred breddir <src

import subprocess
import sys
import os

spec=sys.argv[1]
bdir=sys.argv[2]
keep=sys.argv[3]

pid=os.getpid ()


fname='pattern'
if ('--keep' == keep):
    fname=fname+str(pid)


support=f'--support={bdir}/support.js'

spec="""‛«name» («params») {«block»}’
‛
# «name»
’"""


cmd = [f'{bdir}/fab/fab', '-', 'Bred', f'{bdir}/bred.ohm', f'{bdir}/bredohm1.fab']
p = subprocess.run (cmd,input=spec,capture_output=True,universal_newlines=True)
generatedOhmPart1 = p.stdout
generatedOhm = generatedOhmPart1
print ('generatedOhm')
print (generatedOhm)

# ${bdir}/fab/fab - Bred ${bdir}/bred.ohm ${bdir}/bredohm2.fab           <${spec} >>${fname}.ohm
# ${bdir}/fab/fab - Bred ${bdir}/bred.ohm ${bdir}/bredohm3.fab           <${spec} >>${fname}.ohm
# # generate .fab file
# ${bdir}/fab/fab - Bred ${bdir}/bred.ohm ${bdir}/bredfab.fab ${support} <${spec} >${fname}.fab

# # apply matcher/replacer to source
# #${bdir}/bred-apply.bash ${fname} ${bdir}
# # run the nano-transpiler
# ${bdir}/fab/fab - NestingGrammar ${fname}.ohm ${fname}.fab

# if [ "" = "$keep" ]
# then   
#     rm -f ${fname}.ohm ${fname}.fab
# else
#     echo kept: ${fname}.ohm ${fname}.fab
# fi

