#!/usr/bin/env python3
## usage: ./bred.bash message.bred breddir <src

import subprocess
import sys
import os

spec=sys.argv[1]
bdir=sys.argv[2]
keep=sys.argv[3]

pid=os.getpid ()


fname='pattern'
if ('--keep' == keep):
    pass
else:
    fname=fname+str(pid)


support=f'--support={bdir}/support.js'

spec="""‛«name» («params») {«block»}’
‛
# «name»
’"""


cmd = [f'{bdir}/fab/fab', '-', 'Bred', f'{bdir}/bred.ohm', f'{bdir}/bredohm1.fab']
p = subprocess.run (cmd,input=spec,capture_output=True,universal_newlines=True)
generatedOhmPart1 = p.stdout

cmd = [f'{bdir}/fab/fab', '-', 'Bred', f'{bdir}/bred.ohm', f'{bdir}/bredohm2.fab']
p = subprocess.run (cmd,input=spec,capture_output=True,universal_newlines=True)
generatedOhmPart2 = p.stdout

cmd = [f'{bdir}/fab/fab', '-', 'Bred', f'{bdir}/bred.ohm', f'{bdir}/bredohm3.fab']
p = subprocess.run (cmd,input=spec,capture_output=True,universal_newlines=True)
generatedOhmPart3 = p.stdout



generatedOhm = generatedOhmPart1 + generatedOhmPart2 + generatedOhmPart3

# # generate .fab file
cmd = [f'{bdir}/fab/fab', '-', 'Bred', f'{bdir}/bred.ohm', f'{bdir}/bredfab.fab',
       f'{support}']
p = subprocess.run (cmd,input=spec,capture_output=True,universal_newlines=True)
generatedFab = p.stdout


# # apply matcher/replacer to source
# #${bdir}/bred-apply.bash ${fname} ${bdir}
# # run the nano-transpiler
# ${bdir}/fab/fab - NestingGrammar ${fname}.ohm ${fname}.fab
src6='hard-wired: f (int x) { a = b; }'
## note: fab requires filenames not text
ohmFname = fname + '.ohm'
fabFname = fname + '.fab'
with open (ohmFname, 'w') as f:
    f.write (generatedOhm)
with open (fabFname, 'w') as f:
    f.write (generatedFab)
src = sys.stdin.read ()
cmd = [f'{bdir}/fab/fab', '-', 'NestingGrammar', f'{ohmFname}', f'{fabFname}'] # call JS to parse input
p = subprocess.run (cmd,input=src,capture_output=True,universal_newlines=True)
output = p.stdout
print (output)
